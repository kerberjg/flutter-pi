name: CMake

on:
  push:
    branches: [ master, feature/gh-actions, feature/compositor-ng ]
  pull_request:
    branches: [ master, feature/gh-actions, feature/compositor-ng ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  pi4:
    name: Build and Test on Raspberry Pi 4
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner:
          # - ARM
          - ARM64
        graphics-backends:
          - vulkan-only
          - opengl-only
          - vulkan-and-opengl
        compiler:
          - gcc
          - clang
        build-type:
          - Debug
          - Release
        include:
          - graphics-backends: 'vulkan-only'
            enable-vulkan: 'on'
            enable-opengl: 'off'
          
          - graphics-backends: 'opengl-only'
            enable-vulkan: 'off'
            enable-opengl: 'on'

          - graphics-backends: 'vulkan-and-opengl'
            enable-vulkan: 'on'
            enable-opengl: 'on'
          
          - enable-opengl: 'on'
            opengl-deps: 'libgl1-mesa-dev libgles2-mesa-dev libegl1-mesa-dev'

          - enable-vulkan: 'on'
            vulkan-deps: 'libvulkan-dev'

          - compiler: 'clang'
            clang-deps: 'clang'
    steps:
      # On the self-hosted runners, we assume those are already installed.
      # - name: Install dependencies
      #   run: |
      #     id
      #     sudo apt-get install -y \
      #       git cmake libgl1-mesa-dev libgles2-mesa-dev libegl1-mesa-dev libdrm-dev libgbm-dev \
      #       libsystemd-dev libinput-dev libudev-dev \
      #       libxkbcommon-dev ninja-build libgstreamer-plugins-base1.0-dev \
      #       ${{ matrix.vulkan-deps }} \
      #       ${{ matrix.clang-deps }}

      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: Configure CMake
        run: |
          cmake \
            -B ./build \
            -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
            -DCMAKE_C_COMPILER=${{ matrix.compiler }} \
            -DBUILD_GSTREAMER_AUDIO_PLAYER_PLUGIN=On \
            -DBUILD_GSTREAMER_VIDEO_PLAYER_PLUGIN=On \
            -DENABLE_VULKAN=${{ matrix.enable-vulkan }} \
            -DENABLE_OPENGL=${{ matrix.enable-opengl }} \
            -DENABLE_TESTS=On \
            -GNinja
          echo test

      - name: Build
        run: cmake --build ./build --config ${{ matrix.build-type }}

      - name: Test
        working-directory: build
        run: ctest -C ${{ matrix.build-type }} --output-on-failure

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: flutter-pi-${{ matrix.runner }}-${{ matrix.compiler }}-${{ matrix.graphics-backends }}-${{ matrix.build-type }}
          path: build/flutter-pi

  # container:
  #   name: Build & Test in Container
  #   runs-on: ubuntu-latest
  #   container:
  #     image: ${{ matrix.container }}
  #     env:
  #       DEBIAN_FRONTEND: noninteractive
  #   strategy:
  #     matrix:
  #       container:
  #         - 'debian:bullseye'
  #         - 'debian:buster'
  #       graphics-backends:
  #         - vulkan-only
  #         - opengl-only
  #         - vulkan-and-opengl
  #       compiler:
  #         - gcc
  #         - clang
  #       build-type:
  #         - Debug
  #         - Release
  #       include:
  #         - graphics-backends: 'vulkan-only'
  #           enable-vulkan: 'on'
  #           enable-opengl: 'off'
          
  #         - graphics-backends: 'opengl-only'
  #           enable-vulkan: 'off'
  #           enable-opengl: 'on'

  #         - graphics-backends: 'vulkan-and-opengl'
  #           enable-vulkan: 'on'
  #           enable-opengl: 'on'
          
  #         - enable-opengl: 'on'
  #           opengl-deps: 'libgl1-mesa-dev libgles2-mesa-dev libegl1-mesa-dev'

  #         - enable-vulkan: 'on'
  #           vulkan-deps: 'libvulkan-dev'

  #         - compiler: 'clang'
  #           clang-deps: 'clang'
  #   steps:
  #     # git needs to be installed before checking out, otherwise the checkout will fallback to the REST API,
  #     # and the submodule download won't work.
  #     - name: Install dependencies
  #       run: |
  #         apt-get update && apt-get install -y \
  #           git cmake libdrm-dev libgbm-dev \
  #           libsystemd-dev libinput-dev libudev-dev \
  #           libxkbcommon-dev ninja-build libgstreamer-plugins-base1.0-dev \
  #           ${{ matrix.vulkan-deps }} \
  #           ${{ matrix.opengl-deps }} \
  #           ${{ matrix.clang-deps }}

  #     - uses: actions/checkout@v3
  #       with:
  #         submodules: 'recursive'

  #     - name: Configure CMake
  #       run: |
  #         cmake \
  #           -B ./build \
  #           -S . \
  #           -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
  #           -DCMAKE_C_COMPILER=${{ matrix.compiler }} \
  #           -DBUILD_GSTREAMER_AUDIO_PLAYER_PLUGIN=On \
  #           -DBUILD_GSTREAMER_VIDEO_PLAYER_PLUGIN=On \
  #           -DENABLE_VULKAN=${{ matrix.enable-vulkan }} \
  #           -DENABLE_OPENGL=${{ matrix.enable-opengl }} \
  #           -DENABLE_TESTS=On \
  #           -GNinja

  #     - name: Build
  #       run: cmake --build ./build --config ${{ matrix.build-type }}

  #     - name: Test
  #       working-directory: build
  #       run: ctest -C ${{ matrix.build-type }} --output-on-failure

  required:
    name: required checks
    # needs: [pi4, container]
    needs: [pi4]
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo 'all required checks passed.'

  release:
    name: Create Release
    needs: [pi4]
    runs-on: ubuntu-latest

    steps:
      - name: Get Version
        id: version
        run: |
          DATE=$(date +'%Y%m%d%H%M')
          echo "::set-output name=date::$DATE"
          SHORT_SHA=$(echo ${{ github.sha }} | head -c 7)
          echo "::set-output name=short_sha::$SHORT_SHA"
      
      - name: Download Build (ARM)
        uses: actions/download-artifact@v4
        with:
          name: flutter-pi-ARM-gcc-vulkan-and-opengl-Release # Adjust the name based on the artifact name

      - name: Display structure of downloaded files
        run: ls -R

      - name: Create Release
        uses: softprops/action-gh-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          name: ${{ steps.version.outputs.date }}
          tag_name: ${{ steps.version.outputs.short_sha }}
          # body_path: CHANGELOG.md
          files: |
            flutter-pi
        env:
          GITHUB_TOKEN: ${{ github.token }}
